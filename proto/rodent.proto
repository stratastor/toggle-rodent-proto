syntax = "proto3";

package rodent;

option go_package = "github.com/stratastor/toggle-rodent-proto/proto";

// RodentService defines the gRPC service for Toggle-Rodent communication
service RodentService {
  // Register allows a Rodent node to register with Toggle
  rpc Register(RegisterRequest) returns (RegisterResponse);
  
  // Heartbeat allows Rodent to periodically report its status
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // Connect establishes a long-lived bidirectional connection
  rpc Connect(stream RodentRequest) returns (stream ToggleRequest);
}

// RegisterRequest contains the information needed to register a Rodent node
message RegisterRequest {
  string jwt_token = 1;        // Authentication token
  string ip_address = 2;       // IP address of the Rodent node
  bool is_private_network = 3; // Whether the node is behind NAT
}

// RegisterResponse contains the registration result
message RegisterResponse {
  bool success = 1;
  string message = 2;
  string domain = 3;
  string certificate = 4;
  string private_key = 5;
  string expires_on = 6;
  bool dev_mode = 7;
}

// HeartbeatRequest contains periodic status information
message HeartbeatRequest {
  string rodent_id = 1;
  string session_id = 2;
  SystemInfo system_info = 3;
}

// HeartbeatResponse contains any commands or config updates
message HeartbeatResponse {
  bool success = 1;
  string message = 2;
}

// SystemInfo contains system statistics and health information
message SystemInfo {
  double cpu_usage = 1;
  double memory_usage = 2;
  double disk_usage = 3;
  repeated string warnings = 4;
  repeated string errors = 5;
}

// RodentRequest is sent from Rodent to Toggle
message RodentRequest {
  string session_id = 1;
  string rodent_id = 2;
  string request_id = 3;
  oneof payload {
    CommandResponse command_response = 4;
    EventNotification event = 5;
    Acknowledgement ack = 6;
  }
}

// ToggleRequest is sent from Toggle to Rodent
message ToggleRequest {
  string request_id = 1;
  oneof payload {
    CommandRequest command = 2;
    ConfigUpdate config = 3;
    Acknowledgement ack = 4;
  }
}

// CommandRequest represents a command sent to a Rodent node
message CommandRequest {
  string command_type = 1; // E.g., "zfs.dataset.create", "ad.user.add"
  string target = 2;       // Target resource
  bytes payload = 3;       // JSON-encoded command parameters
}

// CommandResponse is the response to a CommandRequest
message CommandResponse {
  string request_id = 1;   // Matches the request
  bool success = 2;
  string message = 3;
  bytes payload = 4;       // JSON-encoded response data
}

// EventNotification represents an event from Rodent
message EventNotification {
  string event_type = 1;   // E.g., "zfs.dataset.created", "ad.user.added"
  string source = 2;       // Source of the event
  int64 timestamp = 3;     // Unix timestamp in milliseconds
  bytes payload = 4;       // JSON-encoded event data
}

// ConfigUpdate allows Toggle to push configuration changes to Rodent
message ConfigUpdate {
  string config_type = 1;  // E.g., "logging", "monitoring"
  bytes payload = 2;       // JSON-encoded configuration
}

// Acknowledgement is used to confirm receipt of messages
message Acknowledgement {
  string request_id = 1;
  bool success = 2;
  string message = 3;
}