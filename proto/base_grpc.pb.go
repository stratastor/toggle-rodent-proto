// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/base.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RodentService_Register_FullMethodName = "/rodent.RodentService/Register"
	RodentService_Connect_FullMethodName  = "/rodent.RodentService/Connect"
)

// RodentServiceClient is the client API for RodentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RodentService defines the gRPC service for Toggle-Rodent communication
type RodentServiceClient interface {
	// Register allows a Rodent node to register with Toggle
	// Authentication is handled via JWT token in request metadata
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Connect establishes a long-lived bidirectional connection
	// This is the primary channel for all communication after registration
	// Toggle will send commands over this stream and Rodent will respond
	// Status/heartbeat information should be sent as responses to Toggle's status requests
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RodentRequest, ToggleRequest], error)
}

type rodentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRodentServiceClient(cc grpc.ClientConnInterface) RodentServiceClient {
	return &rodentServiceClient{cc}
}

func (c *rodentServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, RodentService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rodentServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RodentRequest, ToggleRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RodentService_ServiceDesc.Streams[0], RodentService_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RodentRequest, ToggleRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RodentService_ConnectClient = grpc.BidiStreamingClient[RodentRequest, ToggleRequest]

// RodentServiceServer is the server API for RodentService service.
// All implementations must embed UnimplementedRodentServiceServer
// for forward compatibility.
//
// RodentService defines the gRPC service for Toggle-Rodent communication
type RodentServiceServer interface {
	// Register allows a Rodent node to register with Toggle
	// Authentication is handled via JWT token in request metadata
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Connect establishes a long-lived bidirectional connection
	// This is the primary channel for all communication after registration
	// Toggle will send commands over this stream and Rodent will respond
	// Status/heartbeat information should be sent as responses to Toggle's status requests
	Connect(grpc.BidiStreamingServer[RodentRequest, ToggleRequest]) error
	mustEmbedUnimplementedRodentServiceServer()
}

// UnimplementedRodentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRodentServiceServer struct{}

func (UnimplementedRodentServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRodentServiceServer) Connect(grpc.BidiStreamingServer[RodentRequest, ToggleRequest]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedRodentServiceServer) mustEmbedUnimplementedRodentServiceServer() {}
func (UnimplementedRodentServiceServer) testEmbeddedByValue()                       {}

// UnsafeRodentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RodentServiceServer will
// result in compilation errors.
type UnsafeRodentServiceServer interface {
	mustEmbedUnimplementedRodentServiceServer()
}

func RegisterRodentServiceServer(s grpc.ServiceRegistrar, srv RodentServiceServer) {
	// If the following call pancis, it indicates UnimplementedRodentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RodentService_ServiceDesc, srv)
}

func _RodentService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RodentServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RodentService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RodentServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RodentService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RodentServiceServer).Connect(&grpc.GenericServerStream[RodentRequest, ToggleRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RodentService_ConnectServer = grpc.BidiStreamingServer[RodentRequest, ToggleRequest]

// RodentService_ServiceDesc is the grpc.ServiceDesc for RodentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RodentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rodent.RodentService",
	HandlerType: (*RodentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RodentService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _RodentService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/base.proto",
}
