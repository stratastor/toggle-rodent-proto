// Copyright 2025 The StrataSTOR Authors and Contributors
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package rodent.events;

option go_package = "github.com/stratastor/toggle-rodent-proto/proto/events";

// =============================================================================
// EVENT TYPE ENUMERATIONS
// =============================================================================

// SystemEventType defines system-level event types
enum SystemEventType {
  SYSTEM_EVENT_TYPE_UNSPECIFIED = 0;

  // Lifecycle events
  SYSTEM_EVENT_TYPE_STARTUP = 1;
  SYSTEM_EVENT_TYPE_SHUTDOWN = 2;
  SYSTEM_EVENT_TYPE_RESTART = 3;

  // Configuration events
  SYSTEM_EVENT_TYPE_CONFIG_CHANGED = 4;
  SYSTEM_EVENT_TYPE_CONFIG_RELOADED = 5;

  // Health and monitoring
  SYSTEM_EVENT_TYPE_HEALTH_CHECK_PASSED = 6;
  SYSTEM_EVENT_TYPE_HEALTH_CHECK_FAILED = 7;
  SYSTEM_EVENT_TYPE_PERFORMANCE_THRESHOLD = 8;

  // User management (local system users)
  SYSTEM_EVENT_TYPE_LOCAL_USER_CREATED = 9;
  SYSTEM_EVENT_TYPE_LOCAL_USER_DELETED = 10;
  SYSTEM_EVENT_TYPE_LOCAL_USER_MODIFIED = 11;
  SYSTEM_EVENT_TYPE_LOCAL_GROUP_CREATED = 12;
  SYSTEM_EVENT_TYPE_LOCAL_GROUP_DELETED = 13;

  // System updates
  SYSTEM_EVENT_TYPE_PACKAGE_INSTALLED = 14;
  SYSTEM_EVENT_TYPE_PACKAGE_UPDATED = 15;
  SYSTEM_EVENT_TYPE_PACKAGE_REMOVED = 16;
}

// StorageEventType defines storage-related event types
enum StorageEventType {
  STORAGE_EVENT_TYPE_UNSPECIFIED = 0;

  // Pool operations
  STORAGE_EVENT_TYPE_POOL_CREATED = 1;
  STORAGE_EVENT_TYPE_POOL_DESTROYED = 2;
  STORAGE_EVENT_TYPE_POOL_IMPORTED = 3;
  STORAGE_EVENT_TYPE_POOL_EXPORTED = 4;
  STORAGE_EVENT_TYPE_POOL_SCRUB_STARTED = 5;
  STORAGE_EVENT_TYPE_POOL_SCRUB_COMPLETED = 6;
  STORAGE_EVENT_TYPE_POOL_SCRUB_FAILED = 7;
  STORAGE_EVENT_TYPE_POOL_STATUS_CHANGED = 8;

  // Dataset operations
  STORAGE_EVENT_TYPE_DATASET_CREATED = 9;
  STORAGE_EVENT_TYPE_DATASET_DESTROYED = 10;
  STORAGE_EVENT_TYPE_DATASET_RENAMED = 11;
  STORAGE_EVENT_TYPE_DATASET_PROPERTY_CHANGED = 12;
  STORAGE_EVENT_TYPE_DATASET_MOUNTED = 13;
  STORAGE_EVENT_TYPE_DATASET_UNMOUNTED = 14;

  // Snapshot operations
  STORAGE_EVENT_TYPE_SNAPSHOT_CREATED = 15;
  STORAGE_EVENT_TYPE_SNAPSHOT_DESTROYED = 16;
  STORAGE_EVENT_TYPE_SNAPSHOT_RENAMED = 17;
  STORAGE_EVENT_TYPE_SNAPSHOT_ROLLED_BACK = 18;
  STORAGE_EVENT_TYPE_SNAPSHOT_CLONED = 19;

  // Transfer operations
  STORAGE_EVENT_TYPE_TRANSFER_STARTED = 20;
  STORAGE_EVENT_TYPE_TRANSFER_COMPLETED = 21;
  STORAGE_EVENT_TYPE_TRANSFER_FAILED = 22;
  STORAGE_EVENT_TYPE_TRANSFER_PAUSED = 23;
  STORAGE_EVENT_TYPE_TRANSFER_RESUMED = 24;
  STORAGE_EVENT_TYPE_TRANSFER_CANCELLED = 25;

  // Volume and space
  STORAGE_EVENT_TYPE_VOLUME_FULL = 26;
  STORAGE_EVENT_TYPE_VOLUME_THRESHOLD = 27;
  STORAGE_EVENT_TYPE_QUOTA_EXCEEDED = 28;
}

// NetworkEventType defines network-related event types
enum NetworkEventType {
  NETWORK_EVENT_TYPE_UNSPECIFIED = 0;

  // Interface events
  NETWORK_EVENT_TYPE_INTERFACE_UP = 1;
  NETWORK_EVENT_TYPE_INTERFACE_DOWN = 2;
  NETWORK_EVENT_TYPE_INTERFACE_ADDED = 3;
  NETWORK_EVENT_TYPE_INTERFACE_REMOVED = 4;
  NETWORK_EVENT_TYPE_INTERFACE_CONFIG_CHANGED = 5;

  // Connectivity events
  NETWORK_EVENT_TYPE_CONNECTION_ESTABLISHED = 6;
  NETWORK_EVENT_TYPE_CONNECTION_FAILED = 7;
  NETWORK_EVENT_TYPE_CONNECTION_LOST = 8;
  NETWORK_EVENT_TYPE_CONNECTION_TIMEOUT = 9;

  // DNS events
  NETWORK_EVENT_TYPE_DNS_CONFIG_CHANGED = 10;
  NETWORK_EVENT_TYPE_DNS_RESOLUTION_FAILED = 11;

  // Routing events
  NETWORK_EVENT_TYPE_ROUTE_ADDED = 12;
  NETWORK_EVENT_TYPE_ROUTE_DELETED = 13;
  NETWORK_EVENT_TYPE_ROUTE_CHANGED = 14;

  // Performance events
  NETWORK_EVENT_TYPE_BANDWIDTH_THRESHOLD = 15;
  NETWORK_EVENT_TYPE_PACKET_LOSS_THRESHOLD = 16;
  NETWORK_EVENT_TYPE_LATENCY_THRESHOLD = 17;
}

// SecurityEventType defines security-related event types
enum SecurityEventType {
  SECURITY_EVENT_TYPE_UNSPECIFIED = 0;

  // Authentication events
  SECURITY_EVENT_TYPE_AUTH_SUCCESS = 1;
  SECURITY_EVENT_TYPE_AUTH_FAILED = 2;
  SECURITY_EVENT_TYPE_AUTH_TIMEOUT = 3;
  SECURITY_EVENT_TYPE_LOGIN_SUCCESS = 4;
  SECURITY_EVENT_TYPE_LOGIN_FAILED = 5;
  SECURITY_EVENT_TYPE_LOGOUT = 6;

  // Authorization events
  SECURITY_EVENT_TYPE_PERMISSION_DENIED = 7;
  SECURITY_EVENT_TYPE_PRIVILEGE_ESCALATION = 8;
  SECURITY_EVENT_TYPE_UNAUTHORIZED_ACCESS = 9;

  // Cryptographic events
  SECURITY_EVENT_TYPE_KEY_GENERATED = 10;
  SECURITY_EVENT_TYPE_KEY_ROTATED = 11;
  SECURITY_EVENT_TYPE_KEY_EXPIRED = 12;
  SECURITY_EVENT_TYPE_KEY_COMPROMISED = 13;
  SECURITY_EVENT_TYPE_CERTIFICATE_ISSUED = 14;
  SECURITY_EVENT_TYPE_CERTIFICATE_EXPIRED = 15;
  SECURITY_EVENT_TYPE_CERTIFICATE_REVOKED = 16;

  // SSH events
  SECURITY_EVENT_TYPE_SSH_KEY_ADDED = 17;
  SECURITY_EVENT_TYPE_SSH_KEY_REMOVED = 18;
  SECURITY_EVENT_TYPE_SSH_CONNECTION_ESTABLISHED = 19;
  SECURITY_EVENT_TYPE_SSH_CONNECTION_FAILED = 20;

  // Security violations
  SECURITY_EVENT_TYPE_INTRUSION_DETECTED = 21;
  SECURITY_EVENT_TYPE_MALWARE_DETECTED = 22;
  SECURITY_EVENT_TYPE_POLICY_VIOLATION = 23;
}

// ServiceEventType defines service management event types
enum ServiceEventType {
  SERVICE_EVENT_TYPE_UNSPECIFIED = 0;

  // Lifecycle events
  SERVICE_EVENT_TYPE_STARTED = 1;
  SERVICE_EVENT_TYPE_STOPPED = 2;
  SERVICE_EVENT_TYPE_RESTARTED = 3;
  SERVICE_EVENT_TYPE_FAILED = 4;
  SERVICE_EVENT_TYPE_CRASHED = 5;
  SERVICE_EVENT_TYPE_KILLED = 6;

  // Configuration events
  SERVICE_EVENT_TYPE_CONFIG_CHANGED = 7;
  SERVICE_EVENT_TYPE_CONFIG_RELOADED = 8;
  SERVICE_EVENT_TYPE_CONFIG_INVALID = 9;

  // Startup configuration
  SERVICE_EVENT_TYPE_ENABLED_AT_STARTUP = 10;
  SERVICE_EVENT_TYPE_DISABLED_AT_STARTUP = 11;

  // Health events
  SERVICE_EVENT_TYPE_HEALTH_CHECK_PASSED = 12;
  SERVICE_EVENT_TYPE_HEALTH_CHECK_FAILED = 13;
  SERVICE_EVENT_TYPE_DEPENDENCY_FAILED = 14;
}

// IdentityEventType defines identity management event types (AD/LDAP)
enum IdentityEventType {
  IDENTITY_EVENT_TYPE_UNSPECIFIED = 0;

  // User management
  IDENTITY_EVENT_TYPE_USER_CREATED = 1;
  IDENTITY_EVENT_TYPE_USER_UPDATED = 2;
  IDENTITY_EVENT_TYPE_USER_DELETED = 3;
  IDENTITY_EVENT_TYPE_USER_ENABLED = 4;
  IDENTITY_EVENT_TYPE_USER_DISABLED = 5;
  IDENTITY_EVENT_TYPE_USER_PASSWORD_CHANGED = 6;
  IDENTITY_EVENT_TYPE_USER_PASSWORD_EXPIRED = 7;
  IDENTITY_EVENT_TYPE_USER_LOCKED = 8;
  IDENTITY_EVENT_TYPE_USER_UNLOCKED = 9;

  // Group management
  IDENTITY_EVENT_TYPE_GROUP_CREATED = 10;
  IDENTITY_EVENT_TYPE_GROUP_UPDATED = 11;
  IDENTITY_EVENT_TYPE_GROUP_DELETED = 12;
  IDENTITY_EVENT_TYPE_GROUP_MEMBER_ADDED = 13;
  IDENTITY_EVENT_TYPE_GROUP_MEMBER_REMOVED = 14;

  // Computer/Device management
  IDENTITY_EVENT_TYPE_COMPUTER_JOINED = 15;
  IDENTITY_EVENT_TYPE_COMPUTER_LEFT = 16;
  IDENTITY_EVENT_TYPE_COMPUTER_UPDATED = 17;
  IDENTITY_EVENT_TYPE_COMPUTER_DISABLED = 18;

  // Domain operations
  IDENTITY_EVENT_TYPE_DOMAIN_SYNC_STARTED = 19;
  IDENTITY_EVENT_TYPE_DOMAIN_SYNC_COMPLETED = 20;
  IDENTITY_EVENT_TYPE_DOMAIN_SYNC_FAILED = 21;
  IDENTITY_EVENT_TYPE_DOMAIN_CONTROLLER_CONNECTED = 22;
  IDENTITY_EVENT_TYPE_DOMAIN_CONTROLLER_DISCONNECTED = 23;
}

// AccessEventType defines access control event types (ACL, permissions)
enum AccessEventType {
  ACCESS_EVENT_TYPE_UNSPECIFIED = 0;

  // ACL operations
  ACCESS_EVENT_TYPE_ACL_CREATED = 1;
  ACCESS_EVENT_TYPE_ACL_UPDATED = 2;
  ACCESS_EVENT_TYPE_ACL_DELETED = 3;
  ACCESS_EVENT_TYPE_ACL_PERMISSION_GRANTED = 4;
  ACCESS_EVENT_TYPE_ACL_PERMISSION_REVOKED = 5;

  // Access attempts
  ACCESS_EVENT_TYPE_FILE_ACCESS_GRANTED = 6;
  ACCESS_EVENT_TYPE_FILE_ACCESS_DENIED = 7;
  ACCESS_EVENT_TYPE_DIRECTORY_ACCESS_GRANTED = 8;
  ACCESS_EVENT_TYPE_DIRECTORY_ACCESS_DENIED = 9;

  // Permission changes
  ACCESS_EVENT_TYPE_OWNERSHIP_CHANGED = 10;
  ACCESS_EVENT_TYPE_PERMISSIONS_CHANGED = 11;
  ACCESS_EVENT_TYPE_INHERITANCE_CHANGED = 12;

  // Security descriptor events
  ACCESS_EVENT_TYPE_SECURITY_DESCRIPTOR_CHANGED = 13;
  ACCESS_EVENT_TYPE_DEFAULT_ACL_CHANGED = 14;
}

// SharingEventType defines file sharing event types (SMB, NFS)
enum SharingEventType {
  SHARING_EVENT_TYPE_UNSPECIFIED = 0;

  // Share lifecycle
  SHARING_EVENT_TYPE_SHARE_CREATED = 1;
  SHARING_EVENT_TYPE_SHARE_UPDATED = 2;
  SHARING_EVENT_TYPE_SHARE_DELETED = 3;
  SHARING_EVENT_TYPE_SHARE_ENABLED = 4;
  SHARING_EVENT_TYPE_SHARE_DISABLED = 5;

  // SMB specific events
  SHARING_EVENT_TYPE_SMB_SHARE_CONNECTED = 6;
  SHARING_EVENT_TYPE_SMB_SHARE_DISCONNECTED = 7;
  SHARING_EVENT_TYPE_SMB_SESSION_ESTABLISHED = 8;
  SHARING_EVENT_TYPE_SMB_SESSION_TERMINATED = 9;
  SHARING_EVENT_TYPE_SMB_FILE_OPENED = 10;
  SHARING_EVENT_TYPE_SMB_FILE_CLOSED = 11;

  // NFS specific events
  SHARING_EVENT_TYPE_NFS_EXPORT_CREATED = 12;
  SHARING_EVENT_TYPE_NFS_EXPORT_DELETED = 13;
  SHARING_EVENT_TYPE_NFS_MOUNT = 14;
  SHARING_EVENT_TYPE_NFS_UNMOUNT = 15;

  // Access and security
  SHARING_EVENT_TYPE_SHARE_ACCESS_GRANTED = 16;
  SHARING_EVENT_TYPE_SHARE_ACCESS_DENIED = 17;
  SHARING_EVENT_TYPE_QUOTA_EXCEEDED = 18;

  // Performance and monitoring
  SHARING_EVENT_TYPE_CONNECTION_LIMIT_REACHED = 19;
  SHARING_EVENT_TYPE_BANDWIDTH_THRESHOLD = 20;
}

// =============================================================================
// STRUCTURED PAYLOAD MESSAGES
// =============================================================================

// System event payloads
message SystemStartupPayload {
  string version = 1;
  int64 boot_time_seconds = 2;
  string hostname = 3;
  repeated string services_started = 4;
}

message SystemConfigChangePayload {
  string config_file = 1;
  string changed_by = 2;
  string change_type = 3; // created, modified, deleted
  repeated string affected_components = 4;
}

message SystemUserPayload {
  string username = 1;
  string full_name = 2;
  repeated string groups = 3;
  string shell = 4;
  string home_dir = 5;
  bool create_home = 6;
  bool system_user = 7;
  int32 uid = 8;
  int32 gid = 9;
}

// Storage event payloads
message StoragePoolPayload {
  string pool_name = 1;
  string pool_state = 2;
  string pool_guid = 3;
  int64 total_size = 4;
  int64 used_size = 5;
  int64 available_size = 6;
  string health_status = 7;
  repeated string vdevs = 8;
}

message StorageDatasetPayload {
  string dataset_name = 1;
  string pool_name = 2;
  string type = 3; // filesystem, volume
  int64 used = 4;
  int64 available = 5;
  int64 referenced = 6;
  string mountpoint = 7;
  map<string, string> properties = 8;
}

message StorageSnapshotPayload {
  string snapshot_name = 1;
  string dataset_name = 2;
  int64 creation_time = 3;
  int64 used_size = 4;
  int64 referenced_size = 5;
  bool recursive = 6;
}

message StorageTransferPayload {
  string transfer_id = 1;
  string operation = 2; // send, receive, send_receive
  string source_snapshot = 3;
  string target_dataset = 4;
  string status = 5;
  string error = 6;
  int64 duration_seconds = 7;
  int64 bytes_transferred = 8;
  int64 transfer_rate = 9;
  string remote_host = 10;
}

// Network event payloads
message NetworkInterfacePayload {
  string interface_name = 1;
  string interface_type = 2; // ethernet, wifi, bond, vlan
  string status = 3; // up, down
  string ip_address = 4;
  string netmask = 5;
  string gateway = 6;
  string mac_address = 7;
  int64 rx_bytes = 8;
  int64 tx_bytes = 9;
  int32 mtu = 10;
}

message NetworkConnectionPayload {
  string source_ip = 1;
  string destination_ip = 2;
  int32 source_port = 3;
  int32 destination_port = 4;
  string protocol = 5;
  string connection_type = 6; // tcp, udp, icmp
  string status = 7;
  int64 duration_ms = 8;
}

// Security event payloads
message SecurityAuthPayload {
  string username = 1;
  string ip_address = 2;
  string method = 3; // password, key, certificate
  string reason = 4; // invalid_credentials, account_locked, etc.
  string resource = 5;
  string user_agent = 6;
  int32 attempt_count = 7;
}

message SecurityKeyPayload {
  string key_id = 1;
  string key_type = 2; // rsa, ed25519, ecdsa
  string algorithm = 3;
  int32 key_size = 4;
  string fingerprint = 5;
  int64 expiry_time = 6;
  string created_by = 7;
  string purpose = 8; // ssh, tls, signing
}

message SecurityCertificatePayload {
  string certificate_id = 1;
  string subject = 2;
  string issuer = 3;
  string serial_number = 4;
  repeated string san_entries = 5;
  int64 not_before = 6;
  int64 not_after = 7;
  string signature_algorithm = 8;
  bool is_ca = 9;
  string key_usage = 10;
}

// Service event payloads
message ServiceStatusPayload {
  string service_name = 1;
  string status = 2; // running, stopped, failed, starting, stopping
  string version = 3;
  int32 pid = 4;
  string config_path = 5;
  string error = 6;
  int64 uptime_seconds = 7;
  int64 memory_usage_bytes = 8;
  double cpu_usage_percent = 9;
  bool enabled_at_startup = 10;
}

// Identity event payloads (AD/LDAP)
message IdentityUserPayload {
  string username = 1;
  string display_name = 2;
  string email = 3;
  string first_name = 4;
  string last_name = 5;
  string department = 6;
  string title = 7;
  string manager = 8;
  repeated string groups = 9;
  bool enabled = 10;
  int64 password_last_set = 11;
  int64 last_login = 12;
  int64 account_expires = 13;
  string domain = 14;
  string distinguished_name = 15;
}

message IdentityGroupPayload {
  string group_name = 1;
  string display_name = 2;
  string description = 3;
  string group_type = 4; // security, distribution
  string scope = 5; // domain_local, global, universal
  repeated string members = 6;
  string managed_by = 7;
  string domain = 8;
  string distinguished_name = 9;
}

message IdentityComputerPayload {
  string computer_name = 1;
  string dns_host_name = 2;
  string operating_system = 3;
  string operating_system_version = 4;
  string description = 5;
  string location = 6;
  bool enabled = 7;
  int64 last_login = 8;
  string distinguished_name = 9;
  string domain = 10;
}

// Access control event payloads
message AccessACLPayload {
  string resource_path = 1;
  string resource_type = 2; // file, directory
  string acl_type = 3; // posix, nfsv4
  string principal = 4; // user or group name
  string principal_type = 5; // user, group
  string permissions = 6; // rwx, specific permissions
  string access_type = 7; // allow, deny
  bool inherited = 8;
  string inheritance_flags = 9;
}

message AccessPermissionPayload {
  string resource_path = 1;
  string resource_type = 2;
  string principal = 3;
  string principal_type = 4;
  string old_permissions = 5;
  string new_permissions = 6;
  string owner = 7;
  string group = 8;
  string changed_by = 9;
}

// File sharing event payloads
message SharingSharePayload {
  string share_name = 1;
  string share_path = 2;
  string share_type = 3; // smb, nfs, iscsi
  string description = 4;
  bool enabled = 5;
  repeated string allowed_users = 6;
  repeated string allowed_groups = 7;
  map<string, string> properties = 8; // browseable, readonly, etc.
  int32 max_connections = 9;
}

message SharingConnectionPayload {
  string share_name = 1;
  string share_type = 2;
  string client_ip = 3;
  string username = 4;
  string connection_type = 5; // smb, nfs
  int64 session_id = 6;
  int64 connected_time = 7;
  int64 bytes_read = 8;
  int64 bytes_written = 9;
  int32 open_files = 10;
}

message SharingFileAccessPayload {
  string share_name = 1;
  string file_path = 2;
  string username = 3;
  string client_ip = 4;
  string access_type = 5; // read, write, execute, delete
  bool success = 6;
  string error_code = 7;
  int64 file_size = 8;
  int64 bytes_transferred = 9;
}